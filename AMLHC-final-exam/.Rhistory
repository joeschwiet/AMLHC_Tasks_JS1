x[x < lower_bound | x > upper_bound] <- NA
return(x)
}
# List of columns to apply the function to
columns_to_check <- c("time_in_hospital", "num_lab_procedures", "num_medications", "number_diagnoses")
# Apply the function only to the specified columns
diabetes_data[columns_to_check] <- lapply(diabetes_data[columns_to_check], replace_outliers_with_NA)
# Check the summary to verify the changes
summary(diabetes_data[columns_to_check])
sapply(diabetes_data[columns_to_check], function(x) sum(is.na(x)))
# Now, select only the complete cases
diabetes_data <- diabetes_data[complete.cases(diabetes_data[columns_to_check]), ]
# Entfernen des Textes nach dem Punkt und Umwandeln in Integer
diabetes_data$diag_1_clean <- as.integer(sub("\\..*", "", diabetes_data$diag_1))
# Funktion zum Gruppieren der ICD-Werte
group_icd <- function(icd_code) {
if (is.na(icd_code)) {
return(NA)
} else if (icd_code == 250) {
return("Diabetes")
} else if ((icd_code >= 460 && icd_code <= 519) || icd_code == 786) {
return("respiratory")
} else if ((icd_code >= 390 && icd_code <= 459) || icd_code == 785) {
return("circulatory")
} else {
return("other")
}
}
# Anwenden der Funktion auf die bereinigte Variable diag_1_clean
diabetes_data$diag_1_grouped <- sapply(diabetes_data$diag_1_clean, group_icd)
# Überprüfen der neuen Variable
table(diabetes_data$diag_1_grouped)
# Umwandeln der Krankheitsgruppen in einen Faktor
diabetes_data$diag_1_grouped <- as.factor(diabetes_data$diag_1_grouped)
# List of variables to convert to factors
variables_to_convert <- c("race", "gender", "age", "max_glu_serum", "A1Cresult", "readmitted",
"metformin", "repaglinide", "nateglinide", "chlorpropamide", "glimepiride",
"acetohexamide", "glipizide", "glyburide", "tolbutamide", "pioglitazone",
"rosiglitazone", "acarbose", "miglitol", "troglitazone", "tolazamide",
"examide", "citoglipton", "insulin", "glyburide.metformin", "glipizide.metformin",
"glimepiride.pioglitazone", "metformin.rosiglitazone", "metformin.pioglitazone",
"change", "diabetesMed", "admission_type_id","discharge_disposition_id", "admission_source_id" )
# Convert specified variables to factors
diabetes_data[variables_to_convert] <- lapply(diabetes_data[variables_to_convert], as.factor)
# Berechnung des Information Gain für die Merkmale
info_gain_results <- information.gain(readmitted ~ ., data = diabetes_data)
info_gain_results <- data.frame(attribute = rownames(info_gain_results),
attribute_importance = info_gain_results$attr_importance)
ranked_info_gain_results <- info_gain_results[order(-info_gain_results$attribute_importance), ]
# Ergebnisse anzeigen
print(ranked_info_gain_results)
# Ändern der Referenzkategorie auf "NO"
diabetes_data$readmitted <- relevel(diabetes_data$readmitted, ref = "NO")
# Erstellen des Modells
multinom_model <- multinom(readmitted ~ A1Cresult, data = diabetes_data)
# Zusammenfassung des Modells anzeigen
summary(multinom_model)
# Zielvariable "readmitted" von drei auf zwei Ausprägungen reduzieren
# In Zeichenkette umwandeln
diabetes_data_reduced <- diabetes_data
diabetes_data_reduced$readmitted <- as.character(diabetes_data$readmitted)
#Alle anderen Werte zu "YES" umkodieren
diabetes_data_reduced$readmitted[diabetes_data$readmitted != "NO"] <- "YES" #
# Zurück in einen Faktor umwandeln
diabetes_data_reduced$readmitted <- as.factor(diabetes_data$readmitted)
# Einfache logistische Regression
logistic_model <- glm(readmitted ~ A1Cresult + diag_1_grouped + number_inpatient + race + gender + age, data = diabetes_data_reduced, family = binomial)
saveRDS(logistic_model, "logistic_model.rds")
# Zusammenfassung des Modells anzeigen
# logistic_model <- readRDS("logistic_model.rds")
summary(logistic_model)
# Wählen Sie die wichtigsten Merkmale basierend auf dem Information Gain aus
top_features <- c(
"number_inpatient", "diag_1_grouped", "A1Cresult","race", "gender", "age")
#top_features <- c( "number_inpatient", "diag_1", "diag_2", "race", "gender", "age",
#  "admission_type_id", "discharge_disposition_id", "admission_source_id",
#  "time_in_hospital", "num_lab_procedures", "num_procedures", "num_medications",
#  "number_emergency", "number_diagnoses", "max_glu_serum", "A1Cresult",
#  "change", "diabetesMed"
#)
# Erstellen eines Trainings- und Testdatensatzes
diabetes_data_reduced <- na.omit(diabetes_data_reduced)
# Setzen eines Zufallsgenerators für Reproduzierbarkeit
set.seed(42)
# Aufteilen des Datensatzes in Trainings- und Testdaten
inTrain <- createDataPartition(diabetes_data_reduced$readmitted, p=0.75, list=FALSE)
training <- diabetes_data_reduced[inTrain, ]
testing <- diabetes_data_reduced[-inTrain, ]
# Überprüfen der Aufteilung
table(training$readmitted)
table(testing$readmitted)
# Erstellen der Matrix der unabhängigen Variablen und des Zielvektors
X_train <- training[, top_features]
y_train <- training$readmitted
X_test <- testing[, top_features]
y_test <- testing$readmitted
# Definieren der Trainingskontrolle
trControl <- trainControl(method="cv", number=10)
# Trainieren des Random Forest Modells
model_rf <- train(X_train, y_train, method="rf", preProcess=c("center","scale"), trControl=trControl)
saveRDS(model_rf, "model_rf.rds")
#model_rf <- readRDS("model_rf.rds")
y_pred <- predict(model_rf, X_test)
confusionMatrix(y_pred, y_test)
confusionMatrix(y_pred, y_test)
# Wählen Sie die wichtigsten Merkmale basierend auf dem Information Gain aus
top_features <- c(
"number_inpatient", "diag_1", "A1Cresult")
#top_features <- c( "number_inpatient", "diag_1", "diag_2", "race", "gender", "age",
#  "admission_type_id", "discharge_disposition_id", "admission_source_id",
#  "time_in_hospital", "num_lab_procedures", "num_procedures", "num_medications",
#  "number_emergency", "number_diagnoses", "max_glu_serum", "A1Cresult",
#  "change", "diabetesMed"
#)
# Erstellen eines Trainings- und Testdatensatzes
diabetes_data_reduced <- na.omit(diabetes_data_reduced)
# Setzen eines Zufallsgenerators für Reproduzierbarkeit
set.seed(42)
# Aufteilen des Datensatzes in Trainings- und Testdaten
inTrain <- createDataPartition(diabetes_data_reduced$readmitted, p=0.75, list=FALSE)
training <- diabetes_data_reduced[inTrain, ]
testing <- diabetes_data_reduced[-inTrain, ]
# Überprüfen der Aufteilung
table(training$readmitted)
table(testing$readmitted)
# Erstellen der Matrix der unabhängigen Variablen und des Zielvektors
X_train <- training[, top_features]
y_train <- training$readmitted
X_test <- testing[, top_features]
y_test <- testing$readmitted
# Definieren der Trainingskontrolle
trControl <- trainControl(method="cv", number=10)
# Trainieren des Random Forest Modells
model_rf_2 <- train(X_train, y_train, method="rf", preProcess=c("center","scale"), trControl=trControl, ntree=100)
# Wählen Sie die wichtigsten Merkmale basierend auf dem Information Gain aus
top_features <- c(
"number_inpatient", "diag_1", "A1Cresult")
#top_features <- c( "number_inpatient", "diag_1", "diag_2", "race", "gender", "age",
#  "admission_type_id", "discharge_disposition_id", "admission_source_id",
#  "time_in_hospital", "num_lab_procedures", "num_procedures", "num_medications",
#  "number_emergency", "number_diagnoses", "max_glu_serum", "A1Cresult",
#  "change", "diabetesMed"
#)
# Erstellen eines Trainings- und Testdatensatzes
diabetes_data_reduced <- na.omit(diabetes_data_reduced)
# Setzen eines Zufallsgenerators für Reproduzierbarkeit
set.seed(42)
# Aufteilen des Datensatzes in Trainings- und Testdaten
inTrain <- createDataPartition(diabetes_data_reduced$readmitted, p=0.75, list=FALSE)
training <- diabetes_data_reduced[inTrain, ]
testing <- diabetes_data_reduced[-inTrain, ]
# Überprüfen der Aufteilung
table(training$readmitted)
table(testing$readmitted)
# Erstellen der Matrix der unabhängigen Variablen und des Zielvektors
X_train <- training[, top_features]
y_train <- training$readmitted
X_test <- testing[, top_features]
y_test <- testing$readmitted
# Definieren der Trainingskontrolle
trControl <- trainControl(method="cv", number=10)
# Trainieren des Random Forest Modells
model_rf_2 <- train(X_train, y_train, method="rf", preProcess=c("center","scale"), trControl=trControl, ntree=100)
saveRDS(model_rf_2, "model_rf_2.rds")
# model_rf <- readRDS("model_rf.rds")
y_pred <- predict(model_rf_2, X_test)
confusionMatrix(y_pred, y_test)
model_rf_1 <- readRDS("model_rf.rds")
y_pred_2 <- predict(model_rf_1, X_test)
y_pred <- predict(model_rf_1, X_test)
View(model_rf_1)
View(model_rf_2)
View(model_rf_1)
y_pred_2 <- predict(model_rf_1, X_test)
all(colnames(X_train) == colnames(X_test))
str(X_train)
str(X_test)
# Wählen Sie die wichtigsten Merkmale basierend auf dem Information Gain aus
top_features <- c(
"number_inpatient", "diag_1_grouped", "A1Cresult","race", "gender", "age")
diabetes_data_reduced <- na.omit(diabetes_data_reduced)
# Setzen eines Zufallsgenerators für Reproduzierbarkeit
set.seed(42)
# Aufteilen des Datensatzes in Trainings- und Testdaten
inTrain <- createDataPartition(diabetes_data_reduced$readmitted, p=0.75, list=FALSE)
training <- diabetes_data_reduced[inTrain, ]
testing <- diabetes_data_reduced[-inTrain, ]
# Überprüfen der Aufteilung
table(training$readmitted)
table(testing$readmitted)
# Erstellen der Matrix der unabhängigen Variablen und des Zielvektors
X_train <- training[, top_features]
y_train <- training$readmitted
X_test <- testing[, top_features]
y_test <- testing$readmitted
# Definieren der Trainingskontrolle
trControl <- trainControl(method="cv", number=10)
# Trainieren des Random Forest Modells
model_rf_1 <- readRDS("model_rf.rds")
y_pred_2 <- predict(model_rf_1, X_test)
all(colnames(X_train) == colnames(X_test))
str(X_train)
knitr::opts_chunk$set(echo = FALSE)
#Set Working Directory with setwd("path_to_folder")
#
#load libraries
library(ggplot2)
library(dplyr)
library(FSelector)
library(rpart)
library(rpart.plot)
library(nnet)
library(knitr)
library(caret)
library(clusterCrit)
library(gplots)
library(fpc)
# Alle nicht-numerischen Variablen aus dem Datensatz ausschließen
scaled_diabetes_data <- diabetes_data[, sapply(diabetes_data, is.numeric)]
colnames(scaled_diabetes_data)
# Ausschließen der Variablen encounter_id und diag_1_clean aus scaled_diabetes_data
scaled_diabetes_data <- scaled_diabetes_data[, !(colnames(scaled_diabetes_data) %in% c("encounter_id", "diag_1_clean"))]
colnames(scaled_diabetes_data)
# Ausschließen der Variablen encounter_id und diag_1_clean aus scaled_diabetes_data
scaled_diabetes_data <- scaled_diabetes_data[, !(colnames(scaled_diabetes_data) %in% c("encounter_id", "diag_1_clean", "patient_nbr"))]
# Applying z-transformation to all numerical columns in the dataset
scaled_diabetes_data <- scale(diabetes_data)
# Applying z-transformation to all numerical columns in the dataset
scaled_diabetes_data <- scale(scaled_diabetes_data)
# Convert the scaled data to matrix format
scaled_diabetes_data <- as.matrix(scaled_diabetes_data)
# Initialize variables to store the results
silhouette_scores <- numeric(4)
k_values <- 2:5
# Set seed for reproducibility
set.seed(123)
# Iterate over k values from 2 to 5 to find the best k based on Silhouette score
for (k in k_values) {
# Apply KMeans clustering
kmc <- kmeans(scaled_diabetes_data, centers = k)
# Calculate the Silhouette coefficient
cl <- intCriteria(scaled_diabetes_data, kmc$cluster, "Silhouette")
# Store the Silhouette score
silhouette_scores[k - 1] <- cl
# Print the cluster centers to inspect them
print(paste("K =", k))
print(head(kmc$centers))
}
# Alle nicht-numerischen Variablen aus dem Datensatz ausschließen
scaled_diabetes_data <- diabetes_data[, sapply(diabetes_data, is.numeric)]
# Ausschließen der Variablen encounter_id und diag_1_clean aus scaled_diabetes_data
scaled_diabetes_data <- scaled_diabetes_data[, !(colnames(scaled_diabetes_data) %in% c("encounter_id", "diag_1_clean", "patient_nbr"))]
# Zufällige Auswahl von 500 Zeilen aus dem Datensatz
set.seed(123) # Für Reproduzierbarkeit
scaled_diabetes_data <- scaled_diabetes_data[sample(nrow(scaled_diabetes_data), 500), ]
# Applying z-transformation to all numerical columns in the dataset
scaled_diabetes_data <- scale(scaled_diabetes_data)
# Convert the scaled data to matrix format
scaled_diabetes_data <- as.matrix(scaled_diabetes_data)
# Initialize variables to store the results
silhouette_scores <- numeric(4)
k_values <- 2:5
# Set seed for reproducibility
set.seed(123)
# Iterate over k values from 2 to 5 to find the best k based on Silhouette score
for (k in k_values) {
# Apply KMeans clustering
kmc <- kmeans(scaled_diabetes_data, centers = k)
# Calculate the Silhouette coefficient
cl <- intCriteria(scaled_diabetes_data, kmc$cluster, "Silhouette")
# Store the Silhouette score
silhouette_scores[k - 1] <- cl
# Print the cluster centers to inspect them
print(paste("K =", k))
print(head(kmc$centers))
}
# Print all Silhouette scores for each k
names(silhouette_scores) <- paste("k =", k_values)
print(silhouette_scores)
# Determine the best k based on the maximum Silhouette score
optimal_k <- which.max(silhouette_scores) + 1  # Adjust index by 1
cat("The optimal number of clusters (k) based on the Silhouette coefficient is:", optimal_k, "\n")
kmc <- kmeans(scaled_diabetes_data, centers = 2)
# Perform PCA on the scaled data
pca_result <- princomp(scaled_diabetes_data)
# Get PCA scores
scores <- pca_result$scores[,1:2]
scores <- scores*-1
# Plot using qplot from ggplot2
plot(scores[, "Comp.1"], scores[,"Comp.2"], col=kmc$cluster)
text(scores[,"Comp.1"], scores[,"Comp.2"], labels=rownames(scaled_diabetes_data), cex=0.5)
hcf <- hclust(dist(scaled_diabetes_data))
plot(hcf)
heatmap.2(scaled_diabetes_data, scale="none")
dbc <- dbscan(scaled_diabetes_data,eps=2, MinPts=3)
print(dbc)
plot(scores[, "Comp.1"], scores[,"Comp.2"], col=dbc$cluster)
text(scores[,"Comp.1"], scores[,"Comp.2"], labels=rownames(scaled_diabetes_data), cex=0.5)
# Alle nicht-numerischen Variablen aus dem Datensatz ausschließen
scaled_diabetes_data <- diabetes_data[, sapply(diabetes_data, is.numeric)]
# Ausschließen der Variablen encounter_id und diag_1_clean aus scaled_diabetes_data
scaled_diabetes_data <- scaled_diabetes_data[, !(colnames(scaled_diabetes_data) %in% c("encounter_id", "diag_1_clean", "patient_nbr"))]
# Zufällige Auswahl von 500 Zeilen aus dem Datensatz
set.seed(123) # Für Reproduzierbarkeit
scaled_diabetes_data <- scaled_diabetes_data[sample(nrow(scaled_diabetes_data), 1000), ]
# Applying z-transformation to all numerical columns in the dataset
scaled_diabetes_data <- scale(scaled_diabetes_data)
# Convert the scaled data to matrix format
scaled_diabetes_data <- as.matrix(scaled_diabetes_data)
# Initialize variables to store the results
silhouette_scores <- numeric(4)
k_values <- 2:5
# Set seed for reproducibility
set.seed(123)
# Iterate over k values from 2 to 5 to find the best k based on Silhouette score
for (k in k_values) {
# Apply KMeans clustering
kmc <- kmeans(scaled_diabetes_data, centers = k)
# Calculate the Silhouette coefficient
cl <- intCriteria(scaled_diabetes_data, kmc$cluster, "Silhouette")
# Store the Silhouette score
silhouette_scores[k - 1] <- cl
# Print the cluster centers to inspect them
print(paste("K =", k))
print(head(kmc$centers))
}
# Print all Silhouette scores for each k
names(silhouette_scores) <- paste("k =", k_values)
print(silhouette_scores)
# Determine the best k based on the maximum Silhouette score
optimal_k <- which.max(silhouette_scores) + 1  # Adjust index by 1
cat("The optimal number of clusters (k) based on the Silhouette coefficient is:", optimal_k, "\n")
kmc <- kmeans(scaled_diabetes_data, centers = 2)
# Perform PCA on the scaled data
pca_result <- princomp(scaled_diabetes_data)
# Get PCA scores
scores <- pca_result$scores[,1:2]
scores <- scores*-1
# Plot using qplot from ggplot2
plot(scores[, "Comp.1"], scores[,"Comp.2"], col=kmc$cluster)
text(scores[,"Comp.1"], scores[,"Comp.2"], labels=rownames(scaled_diabetes_data), cex=0.5)
hcf <- hclust(dist(scaled_diabetes_data))
plot(hcf)
heatmap.2(scaled_diabetes_data, scale="none")
dbc <- dbscan(scaled_diabetes_data,eps=2, MinPts=3)
print(dbc)
plot(scores[, "Comp.1"], scores[,"Comp.2"], col=dbc$cluster)
text(scores[,"Comp.1"], scores[,"Comp.2"], labels=rownames(scaled_diabetes_data), cex=0.5)
# Alle nicht-numerischen Variablen aus dem Datensatz ausschließen
scaled_diabetes_data <- diabetes_data[, sapply(diabetes_data, is.numeric)]
nrow
nrow(scaled_diabetes_data)
# Alle nicht-numerischen Variablen aus dem Datensatz ausschließen
scaled_diabetes_data <- diabetes_data[, sapply(diabetes_data, is.numeric)]
# Ausschließen der Variablen encounter_id und diag_1_clean aus scaled_diabetes_data
scaled_diabetes_data <- scaled_diabetes_data[, !(colnames(scaled_diabetes_data) %in% c("encounter_id", "diag_1_clean", "patient_nbr"))]
# Zufällige Auswahl von 500 Zeilen aus dem Datensatz
set.seed(123) # Für Reproduzierbarkeit
scaled_diabetes_data <- scaled_diabetes_data[sample(nrow(scaled_diabetes_data), 10000), ]
# Applying z-transformation to all numerical columns in the dataset
scaled_diabetes_data <- scale(scaled_diabetes_data)
# Convert the scaled data to matrix format
scaled_diabetes_data <- as.matrix(scaled_diabetes_data)
# Initialize variables to store the results
silhouette_scores <- numeric(4)
k_values <- 2:5
# Set seed for reproducibility
set.seed(123)
# Iterate over k values from 2 to 5 to find the best k based on Silhouette score
for (k in k_values) {
# Apply KMeans clustering
kmc <- kmeans(scaled_diabetes_data, centers = k)
# Calculate the Silhouette coefficient
cl <- intCriteria(scaled_diabetes_data, kmc$cluster, "Silhouette")
# Store the Silhouette score
silhouette_scores[k - 1] <- cl
# Print the cluster centers to inspect them
print(paste("K =", k))
print(head(kmc$centers))
}
# Print all Silhouette scores for each k
names(silhouette_scores) <- paste("k =", k_values)
print(silhouette_scores)
# Determine the best k based on the maximum Silhouette score
optimal_k <- which.max(silhouette_scores) + 1  # Adjust index by 1
cat("The optimal number of clusters (k) based on the Silhouette coefficient is:", optimal_k, "\n")
kmc <- kmeans(scaled_diabetes_data, centers = 2)
# Perform PCA on the scaled data
pca_result <- princomp(scaled_diabetes_data)
# Get PCA scores
scores <- pca_result$scores[,1:2]
scores <- scores*-1
# Plot using qplot from ggplot2
plot(scores[, "Comp.1"], scores[,"Comp.2"], col=kmc$cluster)
text(scores[,"Comp.1"], scores[,"Comp.2"], labels=rownames(scaled_diabetes_data), cex=0.5)
hcf <- hclust(dist(scaled_diabetes_data))
plot(hcf)
heatmap.2(scaled_diabetes_data, scale="none")
dbc <- dbscan(scaled_diabetes_data,eps=2, MinPts=3)
print(dbc)
plot(scores[, "Comp.1"], scores[,"Comp.2"], col=dbc$cluster)
text(scores[,"Comp.1"], scores[,"Comp.2"], labels=rownames(scaled_diabetes_data), cex=0.5)
# Alle nicht-numerischen Variablen aus dem Datensatz ausschließen
scaled_diabetes_data <- diabetes_data[, sapply(diabetes_data, is.numeric)]
# Ausschließen der Variablen encounter_id und diag_1_clean aus scaled_diabetes_data
scaled_diabetes_data <- scaled_diabetes_data[, !(colnames(scaled_diabetes_data) %in% c("encounter_id", "diag_1_clean", "patient_nbr"))]
# Zufällige Auswahl von 500 Zeilen aus dem Datensatz
set.seed(123) # Für Reproduzierbarkeit
scaled_diabetes_data <- scaled_diabetes_data[sample(nrow(scaled_diabetes_data), 10), ]
# Applying z-transformation to all numerical columns in the dataset
scaled_diabetes_data <- scale(scaled_diabetes_data)
# Convert the scaled data to matrix format
scaled_diabetes_data <- as.matrix(scaled_diabetes_data)
# Initialize variables to store the results
silhouette_scores <- numeric(4)
k_values <- 2:5
# Set seed for reproducibility
set.seed(123)
# Iterate over k values from 2 to 5 to find the best k based on Silhouette score
for (k in k_values) {
# Apply KMeans clustering
kmc <- kmeans(scaled_diabetes_data, centers = k)
# Calculate the Silhouette coefficient
cl <- intCriteria(scaled_diabetes_data, kmc$cluster, "Silhouette")
# Store the Silhouette score
silhouette_scores[k - 1] <- cl
# Print the cluster centers to inspect them
print(paste("K =", k))
print(head(kmc$centers))
}
# Alle nicht-numerischen Variablen aus dem Datensatz ausschließen
scaled_diabetes_data <- diabetes_data[, sapply(diabetes_data, is.numeric)]
# Ausschließen der Variablen encounter_id und diag_1_clean aus scaled_diabetes_data
scaled_diabetes_data <- scaled_diabetes_data[, !(colnames(scaled_diabetes_data) %in% c("encounter_id", "diag_1_clean", "patient_nbr"))]
# Zufällige Auswahl von 500 Zeilen aus dem Datensatz
set.seed(123) # Für Reproduzierbarkeit
scaled_diabetes_data <- scaled_diabetes_data[sample(nrow(scaled_diabetes_data), 100), ]
# Applying z-transformation to all numerical columns in the dataset
scaled_diabetes_data <- scale(scaled_diabetes_data)
# Convert the scaled data to matrix format
scaled_diabetes_data <- as.matrix(scaled_diabetes_data)
# Initialize variables to store the results
silhouette_scores <- numeric(4)
k_values <- 2:5
# Set seed for reproducibility
set.seed(123)
# Iterate over k values from 2 to 5 to find the best k based on Silhouette score
for (k in k_values) {
# Apply KMeans clustering
kmc <- kmeans(scaled_diabetes_data, centers = k)
# Calculate the Silhouette coefficient
cl <- intCriteria(scaled_diabetes_data, kmc$cluster, "Silhouette")
# Store the Silhouette score
silhouette_scores[k - 1] <- cl
# Print the cluster centers to inspect them
print(paste("K =", k))
print(head(kmc$centers))
}
# Print all Silhouette scores for each k
names(silhouette_scores) <- paste("k =", k_values)
print(silhouette_scores)
# Determine the best k based on the maximum Silhouette score
optimal_k <- which.max(silhouette_scores) + 1  # Adjust index by 1
cat("The optimal number of clusters (k) based on the Silhouette coefficient is:", optimal_k, "\n")
kmc <- kmeans(scaled_diabetes_data, centers = 2)
# Perform PCA on the scaled data
pca_result <- princomp(scaled_diabetes_data)
# Get PCA scores
scores <- pca_result$scores[,1:2]
scores <- scores*-1
# Plot using qplot from ggplot2
plot(scores[, "Comp.1"], scores[,"Comp.2"], col=kmc$cluster)
text(scores[,"Comp.1"], scores[,"Comp.2"], labels=rownames(scaled_diabetes_data), cex=0.5)
hcf <- hclust(dist(scaled_diabetes_data))
plot(hcf)
heatmap.2(scaled_diabetes_data, scale="none")
dbc <- dbscan(scaled_diabetes_data,eps=2, MinPts=3)
print(dbc)
plot(scores[, "Comp.1"], scores[,"Comp.2"], col=dbc$cluster)
text(scores[,"Comp.1"], scores[,"Comp.2"], labels=rownames(scaled_diabetes_data), cex=0.5)
colnames(scaled_diabetes_data)
knitr::opts_chunk$set(echo = FALSE, results='hide')
#Set Working Directory with setwd("path_to_folder")
#load libraries
library(ggplot2)
library(dplyr)
library(FSelector)
library(rpart)
library(rpart.plot)
library(nnet)
library(knitr)
library(caret)
library(clusterCrit)
library(gplots)
library(fpc)
bar_plot <- ggplot(diabetes_data, aes(x = readmitted)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Readmission Status of Patients",
x = "Readmission Status",
y = "Count") +
theme_minimal() +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, color="black", size=4) +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10)
)
# Plot anzeigen
print(bar_plot)
colnames(diabetes_data)
